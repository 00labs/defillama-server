import axios from "axios";
import fs from "fs";
import { resolve } from "path";
import { ChartJSNodeCanvas } from "chartjs-node-canvas";
const chartJSNodeCanvas = new ChartJSNodeCanvas({ width: 700, height: 300 });
import dayjs from "dayjs";

let data = {
  timestamp: [
    10000000000, 1639366233, 1641958233, 1644550233, 1647142233, 1649734233,
    1652326233, 1654918233, 1657510233, 1660102233, 1662694233, 1665286233,
    1667878233, 1670470233, 1673062233, 1675654233, 1678246233, 1680838233,
    1683430233, 1686022233, 1688614233, 1691206233, 1693798233, 1696390233,
    1698982233, 1701574233, 1639366190, 1641958190, 1644550190, 1647142190,
    1649734190, 1652326190, 1654918190, 1657510190, 1660102190, 1662694190,
    1665286190, 1667878190, 1670470190, 1673062190, 1675654190, 1678246190,
    1680838190, 1683430190, 1686022190, 1688614190, 1691206190, 1693798190,
    1696390190, 1698982190, 1701574190, 1639366169, 1641958169, 1644550169,
    1647142169, 1649734169, 1652326169, 1654918169, 1657510169, 1660102169,
    1662694169, 1665286169, 1667878169, 1670470169, 1673062169, 1675654169,
    1678246169, 1680838169, 1683430169, 1686022169, 1688614169, 1691206169,
    1693798169, 1696390169, 1698982169, 1701574169, 1639364811, 1641956811,
    1644548811, 1647140811, 1649732811, 1652324811, 1654916811, 1657508811,
    1660100811, 1662692811, 1665284811, 1667876811, 1670468811, 1673060811,
    1675652811, 1678244811, 1680836811, 1683428811, 1686020811, 1688612811,
    1691204811, 1693796811, 1696388811, 1698980811, 1701572811, 1616038233,
    1618630233, 1621222233, 1623814233, 1626406233, 1628998233, 1631590233,
    1634182233, 1636774233, 1704166233, 1706758233, 1709350233, 1711942233,
    1714534233, 1717126233, 1719718233, 1722310233, 1724902233, 1727494233,
    1730086233, 1732678233, 1735270233, 1737862233, 1740454233, 1743046233,
    1745638233, 1748230233, 1750822233, 1753414233, 1756006233, 1758598233,
    1761190233, 1763782233, 1608262063, 1639798063, 1608260400,
  ],
  unlocked: [
    {
      data: [
        {
          timestamp: [
            1616038233, 1618630233, 1621222233, 1623814233, 1626406233,
            1628998233, 1631590233, 1634182233, 1636774233, 1639366233,
            1641958233, 1644550233, 1647142233, 1649734233, 1652326233,
            1654918233, 1657510233, 1660102233, 1662694233, 1665286233,
            1667878233, 1670470233, 1673062233, 1675654233, 1678246233,
            1680838233, 1683430233, 1686022233, 1688614233, 1691206233,
            1693798233, 1696390233, 1698982233, 1701574233, 1704166233,
            1706758233, 1709350233, 1711942233, 1714534233, 1717126233,
            1719718233, 1722310233, 1724902233, 1727494233, 1730086233,
            1732678233, 1735270233, 1737862233, 1740454233, 1743046233,
            1745638233, 1748230233, 1750822233, 1753414233, 1756006233,
            1758598233, 1761190233, 1763782233,
          ],
          unlocked: [
            0, 9.166666666666666e22, 1.8333333333333332e23,
            2.7499999999999997e23, 3.6666666666666665e23, 4.583333333333333e23,
            5.5e23, 6.416666666666666e23, 7.333333333333333e23, 8.25e23,
            9.166666666666667e23, 1.0083333333333333e24, 1.1e24,
            1.1916666666666667e24, 1.2833333333333332e24, 1.3749999999999998e24,
            1.4666666666666663e24, 1.5583333333333329e24, 1.6499999999999994e24,
            1.741666666666666e24, 1.8333333333333325e24, 1.924999999999999e24,
            2.0166666666666656e24, 2.108333333333332e24, 2.1999999999999987e24,
            2.2916666666666652e24, 2.3833333333333318e24, 2.4749999999999986e24,
            2.5666666666666654e24, 2.658333333333332e24, 2.749999999999999e24,
            2.841666666666666e24, 2.9333333333333326e24, 3.0249999999999995e24,
            3.116666666666666e24, 3.208333333333333e24, 3.3e24,
            3.3916666666666667e24, 3.4833333333333335e24, 3.5750000000000003e24,
            3.666666666666667e24, 3.758333333333334e24, 3.850000000000001e24,
            3.9416666666666676e24, 4.0333333333333344e24, 4.125000000000001e24,
            4.216666666666668e24, 4.308333333333335e24, 4.4000000000000016e24,
            4.4916666666666685e24, 4.5833333333333353e24, 4.675000000000002e24,
            4.766666666666669e24, 4.858333333333336e24, 4.950000000000003e24,
            5.041666666666669e24, 5.133333333333336e24, 5.225000000000003e24,
          ],
          isContinuous: false,
        },
        {
          timestamp: [1616038233],
          unlocked: [2.75e23],
          isContinuous: false,
        },
      ],
      section: "governance",
    },
    {
      data: [
        {
          timestamp: [1608260400],
          unlocked: [500000],
          isContinuous: false,
        },
      ],
      section: "airdrop",
    },
    {
      data: [
        {
          timestamp: [1608262063, 1639798063],
          unlocked: [0, 1000000],
          isContinuous: true,
        },
      ],
      section: "anonymity mining",
    },
    {
      data: [
        {
          timestamp: [
            10000000000, 1641956811, 1644548811, 1647140811, 1649732811,
            1652324811, 1654916811, 1657508811, 1660100811, 1662692811,
            1665284811, 1667876811, 1670468811, 1673060811, 1675652811,
            1678244811, 1680836811, 1683428811, 1686020811, 1688612811,
            1691204811, 1693796811, 1696388811, 1698980811, 1701572811,
          ],
          unlocked: [
            0, 2.2844638888888887e22, 4.5689277777777774e22,
            6.853391666666666e22, 9.137855555555555e22, 1.1422319444444443e23,
            1.370678333333333e23, 1.599124722222222e23, 1.8275711111111106e23,
            2.0560174999999994e23, 2.2844638888888882e23, 2.512910277777777e23,
            2.7413566666666658e23, 2.9698030555555546e23, 3.198249444444444e23,
            3.4266958333333325e23, 3.655142222222221e23, 3.88358861111111e23,
            4.112034999999999e23, 4.3404813888888876e23, 4.5689277777777764e23,
            4.797374166666665e23, 5.025820555555554e23, 5.254266944444443e23,
            5.4827133333333316e23,
          ],
          isContinuous: false,
        },
        {
          timestamp: [10000000000, 1639364811],
          unlocked: [0, 0],
          isContinuous: false,
        },
        {
          timestamp: [
            10000000000, 1641958169, 1644550169, 1647142169, 1649734169,
            1652326169, 1654918169, 1657510169, 1660102169, 1662694169,
            1665286169, 1667878169, 1670470169, 1673062169, 1675654169,
            1678246169, 1680838169, 1683430169, 1686022169, 1688614169,
            1691206169, 1693798169, 1696390169, 1698982169, 1701574169,
          ],
          unlocked: [
            0, 2.2844638888888887e22, 4.5689277777777774e22,
            6.853391666666666e22, 9.137855555555555e22, 1.1422319444444443e23,
            1.370678333333333e23, 1.599124722222222e23, 1.8275711111111106e23,
            2.0560174999999994e23, 2.2844638888888882e23, 2.512910277777777e23,
            2.7413566666666658e23, 2.9698030555555546e23, 3.198249444444444e23,
            3.4266958333333325e23, 3.655142222222221e23, 3.88358861111111e23,
            4.112034999999999e23, 4.3404813888888876e23, 4.5689277777777764e23,
            4.797374166666665e23, 5.025820555555554e23, 5.254266944444443e23,
            5.4827133333333316e23,
          ],
          isContinuous: false,
        },
        {
          timestamp: [10000000000, 1639366169],
          unlocked: [0, 0],
          isContinuous: false,
        },
        {
          timestamp: [
            10000000000, 1641958190, 1644550190, 1647142190, 1649734190,
            1652326190, 1654918190, 1657510190, 1660102190, 1662694190,
            1665286190, 1667878190, 1670470190, 1673062190, 1675654190,
            1678246190, 1680838190, 1683430190, 1686022190, 1688614190,
            1691206190, 1693798190, 1696390190, 1698982190, 1701574190,
          ],
          unlocked: [
            0, 2.2844638888888887e22, 4.5689277777777774e22,
            6.853391666666666e22, 9.137855555555555e22, 1.1422319444444443e23,
            1.370678333333333e23, 1.599124722222222e23, 1.8275711111111106e23,
            2.0560174999999994e23, 2.2844638888888882e23, 2.512910277777777e23,
            2.7413566666666658e23, 2.9698030555555546e23, 3.198249444444444e23,
            3.4266958333333325e23, 3.655142222222221e23, 3.88358861111111e23,
            4.112034999999999e23, 4.3404813888888876e23, 4.5689277777777764e23,
            4.797374166666665e23, 5.025820555555554e23, 5.254266944444443e23,
            5.4827133333333316e23,
          ],
          isContinuous: false,
        },
        {
          timestamp: [10000000000, 1639366190],
          unlocked: [0, 0],
          isContinuous: false,
        },
        {
          timestamp: [
            10000000000, 1641958233, 1644550233, 1647142233, 1649734233,
            1652326233, 1654918233, 1657510233, 1660102233, 1662694233,
            1665286233, 1667878233, 1670470233, 1673062233, 1675654233,
            1678246233, 1680838233, 1683430233, 1686022233, 1688614233,
            1691206233, 1693798233, 1696390233, 1698982233, 1701574233,
          ],
          unlocked: [
            0, 1.3888888888888889e22, 2.7777777777777777e22,
            4.166666666666667e22, 5.5555555555555555e22, 6.944444444444444e22,
            8.333333333333333e22, 9.722222222222222e22, 1.1111111111111111e23,
            1.25e23, 1.3888888888888889e23, 1.5277777777777778e23,
            1.6666666666666666e23, 1.8055555555555555e23, 1.9444444444444444e23,
            2.0833333333333333e23, 2.2222222222222222e23, 2.361111111111111e23,
            2.5e23, 2.638888888888889e23, 2.7777777777777777e23,
            2.9166666666666666e23, 3.0555555555555555e23, 3.1944444444444444e23,
            3.333333333333333e23,
          ],
          isContinuous: false,
        },
        {
          timestamp: [10000000000, 1639366233],
          unlocked: [0, 1.6666666666666666e23],
          isContinuous: false,
        },
        {
          timestamp: [
            10000000000, 1641958233, 1644550233, 1647142233, 1649734233,
            1652326233, 1654918233, 1657510233, 1660102233, 1662694233,
            1665286233, 1667878233, 1670470233, 1673062233, 1675654233,
            1678246233, 1680838233, 1683430233, 1686022233, 1688614233,
            1691206233, 1693798233, 1696390233, 1698982233, 1701574233,
          ],
          unlocked: [
            0, 910527777777777600000, 1.8210555555555553e21,
            2.731583333333333e21, 3.6421111111111106e21, 4.552638888888888e21,
            5.463166666666666e21, 6.373694444444443e21, 7.284222222222221e21,
            8.194749999999999e21, 9.105277777777776e21, 1.0015805555555554e22,
            1.0926333333333332e22, 1.183686111111111e22, 1.2747388888888887e22,
            1.3657916666666665e22, 1.4568444444444442e22, 1.547897222222222e22,
            1.6389499999999998e22, 1.7300027777777775e22, 1.8210555555555553e22,
            1.912108333333333e22, 2.003161111111111e22, 2.0942138888888886e22,
            2.1852666666666663e22,
          ],
          isContinuous: false,
        },
        {
          timestamp: [10000000000, 1639366233],
          unlocked: [0, 1.0926333333333334e22],
          isContinuous: false,
        },
      ],
      section: "team and investors",
    },
  ],
};
export async function getChartPng(data: any) {
  try {
    data = cleanData(data);
    const path = resolve(__dirname);
    const writer = fs.createWriteStream(`${path}/result.png`);

    let response = await axios.get(`http://localhost:3000/`, {
      params: { data },
      responseType: "stream",
    });

    response.data.pipe(writer);
    return new Promise((resolve, reject) => {
      writer.on("finish", resolve);
      writer.on("error", reject);
    });
  } catch (e) {
    console.log(e);
  }
}
function cleanData(data: any): any {
  return data;
}
async function main() {
  await getChartPng(data);
  return;
}
main2(); // ts-node src/unlocks/utils/client.ts

async function main2() {
  data = cleanData(data);
  const path = resolve(__dirname);
  const image = await serverSide(data);
  fs.writeFile(`${path}/result2.png`, image, function (err) {
    if (err) {
      return console.log(err);
    }
    console.log("The file was saved!");
  });
}
async function serverSide(data: any) {
  // dataset: {data: {time, unlock, isCont}[], section }

  const datasets: any[] = [];
  data.unlocked.map((u: any) =>
    u.data.map((d: any) => {
      datasets.push({
        label: u.section,
        data: d.unlocked,
        borderColor: "#90ee90",
        backgroundColor: "#ffffff",
      });
    }),
  );
  const options = {
    type: "line" as any,
    data: {
      labels: data.timestamp,
      datasets,
    },
    options: {
      layout: {
        autoPadding: true,
      },
      elements: {
        point: {
          radius: 0,
        },
      },
    },
  };
  return await draw(options);
}
async function draw(configuration: any) {
  const image = await chartJSNodeCanvas.renderToBuffer(
    configuration,
    `image/png`,
  );
  return image;
}
function stringifyDate(datetime: number, format: string, locale = "en-US") {
  return dayjs(datetime).locale(locale).format(format);
}
